ANSWER 1 from stackoverflow

'this' keyword does things in JavaScript
  -It creates a new object. The type of this object is simply object.
  -It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
  -It makes the this variable point to the newly created object.
  -It executes the constructor function, using the newly created object whenever this is mentioned.
  -It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in

new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.

The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to set or read this value.

Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.

Here is an example:

ObjMaker = function() {this.a = 'first';};
// ObjMaker is just a function, there's nothing special about it that makes
// it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible prototype property that
// we can alter. I just added a property called 'b' to it. Like
// all objects, ObjMaker also has an inaccessible [[prototype]] property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called obj1.  At first obj1 was the same
// as {}. The [[prototype]] property of obj1 was then set to the current
// object value of the ObjMaker.prototype (if ObjMaker.prototype is later
// assigned a new object value, obj1's [[prototype]] will not change, but you
// can alter the properties of ObjMaker.prototype to add to both the
// prototype and [[prototype]]). The ObjMaker function was executed, with
// obj1 in place of this... so obj1.a was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// obj1 doesn't have a property called 'b', so JavaScript checks
// its [[prototype]]. Its [[prototype]] is the same as ObjMaker.prototype
// ObjMaker.prototype has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.

If you want something like a subclass, then you do this:

SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype
// was created with the ObjMaker function, which assigned a for us




ANSWER 2 from w3school

The JavaScript this Keyword
Example
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
What is this?
The JavaScript this keyword refers to the object it belongs to.

It has different values depending on where it is used:
  1.In a method, this refers to the owner object.
  2.Alone, this refers to the global object.
  3.In a function, this refers to the global object.
  4.In a function, in strict mode, this is undefined.
  5.In an event, this refers to the element that received the event.
  6.Methods like call(), and apply() can refer this to any object.


1.THIS IN A METHOD
  In an object method, this refers to the "owner" of the method.
  In the example on the top of this page, this refers to the person object.
  The person object is the owner of the fullName method.

  fullName : function() {
    return this.firstName + " " + this.lastName;
  }

2.THIS ALONE
When used alone, the owner is the Global object, so this refers to the Global object.

In a browser window the Global object is [object Window]:

Example
var x = this;
 In strict mode, when used alone, this also refers to the Global object [object Window]:

Example
"use strict";
var x = this;
this in a Function (Default)
In a JavaScript function, the owner of the function is the default binding for this.

So, in a function, this refers to the Global object [object Window].

Example
function myFunction() {
  return this;
}
this in a Function (Strict)
JavaScript strict mode does not allow default binding.

So, when used in a function, in strict mode, this is undefined.

Example
"use strict";
function myFunction() {
  return this;
}
this in Event Handlers
In HTML event handlers, this refers to the HTML element that received the event:

Example
<button onclick="this.style.display='none'">
  Click to Remove Me!
</button>

Object Method Binding
In these examples, this is the person object (The person object is the "owner" of the function):

Example
var person = {
  firstName  : "John",
  lastName   : "Doe",
  id         : 5566,
  myFunction : function() {
    return this;
  }
};
Example
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
In other words: this.firstName means the firstName property of this (person) object.

Explicit Function Binding
The call() and apply() methods are predefined JavaScript methods.

They can both be used to call an object method with another object as argument.

You can read more about call() and apply() later in this tutorial.

In the example below, when calling person1.fullName with person2 as argument, this will refer to person2, even if it is a method of person1:

Example
var person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person2 = {
  firstName:"John",
  lastName: "Doe",
}
person1.fullName.call(person2);  // Will return "John Doe"







JAVASCRIPT OBJECTS
-In JavaScript, objects are king, since all JavaScript values are objects, except primitives. If you understand objects, you understand JavaScript.
*Booleans can be objects (if defined with the new keyword)
*Numbers can be objects (if defined with the new keyword)
*Strings can be objects (if defined with the new keyword)
*Dates are always objects
*Maths are always objects
*Regular expressions are always objects
*Arrays are always objects
*Functions are always objects
*Objects are always objects
-JavaScript Objects are Mutable, they are addressed by reference, not by value.
-If person is an object, the following statement will not create a copy of person.
  var x = person;//The object x is not a copy of person, it is person. Both x and person are the same object.
-Any changes to x will also change person, because x and person are the same object.
  var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}
  var x = person;
  x.age = 10;           // This will change both x.age and person.age


JAVASCRIPT PRIMITIVES
-JavaScript defines 7 types of primitive data types.
-A primitive data type is data that has a primitive value, i.e. value that has no properties or methods.
-Primitive values are immutable. If x = 3.14, you can change the value of x. But you cannot change the value of 3.14.
  1.string
  2.number
  3.boolean
  4.null
  5.undefined
  6.bigint
  7.symbol


OBJECT METHODS
-Methods are actions that can be performed on objects.
-Object properties can be both primitive values, other objects, and functions.
-An object method is an object property containing a function definition.
-JavaScript objects are containers for named values, called properties and methods.
  Property    Value
  firstName   John
  lastName    Doe
  age         50
  eyeColor    blue
  fullName    function() {return this.firstName + " " + this.lastName;} //here is the method


SOME DIFFERENT WAYS TO CREATE OBJECTS:
I.Define and create a single object, using an object literal.
II.Define and create a single object, with the keyword new.
III.Define an object constructor, and then create objects of the constructed type.
IV. ECMAScript 5, an object can also be created with the function Object.create().


I.USING AN OBJECT LITERAL
-This is the easiest and fastest way to create a JavaScript Object.
-Using an object literal, you both define and create an object in one statement.
-An object literal is a list of name:value pairs (like age:50) inside curly braces {}.
-The following example creates a new JavaScript object with four properties:
  var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
-Spaces and line breaks are not important. An object definition can span multiple lines:
  var person = {
    firstName: "John",
    lastName: "Doe",
    age: 50,
    eyeColor: "blue"
  };


II.USING THE JAVASCRIPT KEYWORD NEW
-The following example also creates a new JavaScript object with four properties:
  var person = new Object();
  person.firstName = "John";
  person.lastName = "Doe";
  person.age = 50;
  person.eyeColor = "blue";

  what 'new' does...
1. create a new object
2. set the prototype
3. execute constructor with 'this'
4. return the created object


III.CONSTRUCTORS
-are functions that create new objects - Think of them as a blueprint for the creation of new objects.
-are defined with a capitalized name to distinguish them from other functions that are not constructors.
-Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
-They define properties and behaviors that will belong to the new object, instead of returning a value as other functions might.
-Constructor is especially helpful when you want to make many objects that has lots of the same properties.
-This constructor defines a Bird object with properties name, color, and numLegs set to Albert, blue, and 2, respectively.
  function Bird() {
    this.name = "Albert";
    this.color = "blue";
    this.numLegs = 2;// "this" inside the constructor always refers to the object being created
  }
-To more easily create different Bird objects, you can design your Bird constructor to accept parameters, then pass in the values as arguments to define each unique bird into the Bird constructor. This gives a new instance of Bird with name and color properties set to Bruce and red, respectively. The numLegs property is still set to 2.
  function Bird(name, color) {
    this.name = name;
    this.color = color;
    this.numLegs = 2;
  }
  let cardinal = new Bird("Bruce", "red");
The cardinal now has these properties:
  cardinal.name // => Bruce
  cardinal.color // => red
  cardinal.numLegs // => 2


NEW OPERATOR
-From the example above:
  function Bird() {
    this.name = "Albert";
    this.color  = "blue";
    this.numLegs = 2;
  }
  let blueBird = new Bird();
-Notice that the new operator is used when calling a constructor. This tells JavaScript to create a new instance of Bird called blueBird. Without the new operator, this inside the constructor would not point to the newly created object, giving unexpected results.
-Now blueBird has all the properties defined inside the Bird constructor:
  blueBird.name; // => Albert
  blueBird.color; // => blue
  blueBird.numLegs; // => 2
-Just like any other object, its properties can be accessed and modified:
  blueBird.name = 'Elvira';
  blueBird.name; // => Elvira


INSTANCEOF
-it's used to verify an object's constructor
-Anytime a constructor function creates a new object, that object is said to be an instance of its constructor. the instanceof operator  returning true or false based on whether or not that object was created with the constructor function, for e.g.:
  let Bird = function(name, color) {
    this.name = name;
    this.color = color;
    this.numLegs = 2;
  }
  let crow = new Bird("Alexis", "black");
  crow instanceof Bird; // => true
-If an object is created without using a constructor, instanceof will verify that it is not an instance of that constructor, e.g.
  let canary = {
    name: "Mildred",
    color: "Yellow",
    numLegs: 2
  };
  canary instanceof Bird; // => false



PROTOTYPE
-Since numLegs will probably have the same value for all instances of Bird, you essentially have a duplicated variable numLegs inside each Bird instance.
-This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.
-A better way is to use Bird’s prototype. Properties in the prototype are shared among ALL instances of Bird. Here's how to add numLegs to the Bird prototype:
  Bird.prototype.numLegs = 2;



OWN PROPERTIES & PROTOTYPE PROPERTIES
-There are two kinds of properties: own properties and prototype properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the prototype.
  function Bird(name) {
    this.name = name;  //own property
  }
  Bird.prototype.numLegs = 2; // prototype property
  let duck = new Bird("Donald");



HERE IS HOW YOU ADD DUCK'S OWN PROPERTIES TO THE ARRAY OWNPROPS AND PROTOTYPE PROPERTIES TO THE ARRAY PROTOTYPEPROPS:
  let ownProps = []; let prototypeProps = [];
  for (let property in duck) {
    if(duck.hasOwnProperty(property)) {
      ownProps.push(property);
    } else {
      prototypeProps.push(property);
    }
  }
  console.log(ownProps); // prints ["name"]
  console.log(prototypeProps); // prints ["numLegs"]



EFFICIENT WAY TO ADD PROTOTYPE (with a little drawback)
-This is individually adding properties to a prototype, which can be tedious after a while
  Bird.prototype.numLegs = 2;
  Bird.prototype.eat = function() {
    console.log("nom nom nom");
  }
  Bird.prototype.describe = function() {
    console.log("My name is " + this.name);
  }
-A more efficient way is first to set the prototype to a new object.
-This method comes with a drawback - it erases the constructor property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:
  duck.constructor === Bird; // false -- Oops
  duck.constructor === Object; // true, all objects inherit from Object.prototype
  duck instanceof Bird; // true, still works
To fix this, whenever a prototype is manually set to a new object, remember to define the constructor property:
  function Bird(name){
    this.name = name;
  };
  Bird.prototype = {
    constructor: Bird, // define the constructor property
    numLegs: 2,
    eat: function() {
      console.log("nom nom nom");
    },
    describe: function() {
      console.log("My name is " + this.name);
    }
  };



UNDERSTAND WHERE AN OBJECT’S PROTOTYPE COMES FROM (INHERITANCE OF PROTOTYPE)
-Just like people inherit genes from their parents, an object inherits its prototype directly from the constructor function that created it. For example, here the Bird constructor creates the duck object:
  function Bird(name) {
    this.name = name;
  }
  let duck = new Bird("Donald");
-duck inherits its prototype from the Bird constructor function. You can show this relationship with the isPrototypeOf method:
  Bird.prototype.isPrototypeOf(duck);// returns true



UNDERSTAND THE PROTOTYPE CHAIN
All objects in JavaScript (with a few exceptions) have a prototype. Also, an object’s prototype itself is an object.

function Bird(name) {
  this.name = name;
}
typeof Bird.prototype; // yields 'object'

Because a prototype is an object, a prototype can have its own prototype! In this case, the prototype of Bird.prototype is Object.prototype:

Object.prototype.isPrototypeOf(Bird.prototype); // returns true

How is this useful? You may recall the hasOwnProperty method from a previous challenge:

let duck = new Bird("Donald");
duck.hasOwnProperty("name"); // yields true

The hasOwnProperty method is defined in Object.prototype, which can be accessed by Bird.prototype, which can then be accessed by duck. This is an example of the prototype chain.
In this prototype chain, Bird is the SUPERTYPE for duck, duck is the SUBTYPE, and object is a SUPERTYPE for both Bird and duck.
Object is a supertype for all objects in JavaScript. Therefore, any object can use the hasOwnProperty method.



USE INHERITANCE SO YOU DON'T REPEAT YOURSELF
There's a principle in programming called Don't Repeat Yourself (DRY). The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.

Notice in the example below that the describe method is shared by Bird and Dog:

Bird.prototype = {
  constructor: Bird,
  describe: function() {
    console.log("My name is " + this.name);
  }
};

Dog.prototype = {
  constructor: Dog,
  describe: function() {
    console.log("My name is " + this.name);
  }
};

The describe method is repeated in two places. The code can be edited to follow the DRY principle by creating a SUPERTYPE (or parent) called Animal:

function Animal() { };
Animal.prototype = {
  constructor: Animal,
  describe: function() {
    console.log("My name is " + this.name);
  }//Since Animal includes the describe method, you can remove it from Bird and Dog
};
Bird.prototype = {
  constructor: Bird
};
Dog.prototype = {
  constructor: Dog
};



INHERITANCE

let animal = new Animal();
There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages, (supertype: Animal and subtype: Bird):

PT1. INHERIT BEHAVIORS FROM A SUPERTYPE

function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
let animal = Object.create(Animal.prototype);
animal.eat(); // prints "nom nom nom"
animal instanceof Animal; // => true


PT2. SET THE SUBTYPE (THE CHILD'S PROTOTYPE) TO AN INSTANCE OF THE PARENT

Bird.prototype = Object.create(Animal.prototype);
let duck = new Bird("Donald");
duck.eat(); // prints "nom nom nom"



RESET AN INHERITED CONSTRUCTOR PROPERTY
When an object inherits its prototype from another object, it also inherits the supertype's constructor property.

Here's an example:

function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
let duck = new Bird();
duck.constructor // function Animal(){...}

Change the duck and all instances of Bird, so that they were constructed by Bird constructor, not by Animal Constructor:

Bird.prototype.constructor = Bird;
duck.constructor // function Bird(){...}


ADD METHODS AFTER INHERITANCE
A constructor function that inherits its prototype object from a supertype constructor function can still have its own methods in addition to inherited methods.

For example, Bird is a constructor that inherits its prototype from Animal:

function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.constructor = Bird;

In addition to what is inherited from Animal, you want to add behavior that is unique to Bird objects. Here, Bird will get a fly() function. Functions are added to Bird's prototype the same way as any constructor function:

Bird.prototype.fly = function() {
  console.log("I'm flying!");
};

Now instances of Bird will have both eat() and fly() methods:

let duck = new Bird();
duck.eat(); // prints "nom nom nom"
duck.fly(); // prints "I'm flying!"


OVERRIDE INHERITED METHODS
It's possible to override an inherited method. Here's an example of Bird overriding the eat() method inherited from Animal:

function Animal() { }
Animal.prototype.eat = function() {
  return "nom nom nom";
};
function Bird() { }
Bird.prototype = Object.create(Animal.prototype); // Inherit all methods from Animal
Bird.prototype.eat = function() {
  return "peck peck peck";
};// Bird.eat() overrides Animal.eat()


If you have an instance let duck = new Bird(); and you call duck.eat(), this is how JavaScript looks for the method on duck’s prototype chain:
duck => Is eat() defined here? No.
Bird => Is eat() defined here? => Yes. Execute it and stop searching.
Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.
Object => JavaScript stopped searching before reaching this level.




USE A MIXIN TO ADD COMMON BEHAVIOR BETWEEN UNRELATED OBJECTS
As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like Bird and Airplane. They can both fly, but a Bird is not a type of Airplane and vice versa.

For unrelated objects, it's better to use mixins. A mixin allows other objects to use a collection of functions.

let flyMixin = function(obj) {
  obj.fly = function() {
    console.log("Flying, wooosh!");
  }
};
The flyMixin takes any object and gives it the fly method.

let bird = {
  name: "Donald",
  numLegs: 2
};

let plane = {
  model: "777",
  numPassengers: 524
};

flyMixin(bird);
flyMixin(plane);
Here bird and plane are passed into flyMixin, which then assigns the fly function to each object. Now bird and plane can both fly:

bird.fly(); // prints "Flying, wooosh!"
plane.fly(); // prints "Flying, wooosh!"
Note how the mixin allows for the same fly method to be reused by unrelated objects bird and plane.




USE CLOSURE TO PROTECT PROPERTIES WITHIN AN OBJECT FROM BEING MODIFIED EXTERNALLY
In the previous challenge, bird had a public property name. It is considered public because it can be accessed and changed outside of bird's definition.

bird.name = "Duffy";
Therefore, any part of your code can easily change the name of bird to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.

The simplest way to make this public property private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the variable can only be accessed and changed by methods also within the constructor function.

function Bird() {
  let hatchedEgg = 10; // private variable

  /* publicly available method that a bird object can use */
  this.getHatchedEggCount = function() {
    return hatchedEgg;
  };
}
let ducky = new Bird();
ducky.getHatchedEggCount(); // returns 10
Here getHatchedEggCount is a privileged method, because it has access to the private variable hatchedEgg. This is possible because hatchedEgg is declared in the same context as getHatchedEggCount. In JavaScript, a function always has access to the context in which it was created. This is called closure.



IMMEDIATELY INVOKED FUNCTION EXPRESSION (IIFE)
A common pattern in JavaScript is to execute a function as soon as it is declared:

(function () {
  console.log("Chirp, chirp!");
})(); // this is an anonymous function expression that executes right away
// Outputs "Chirp, chirp!" immediately
Note that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an immediately invoked function expression (IIFE).


An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or module. For example, an earlier challenge defined two mixins

function glideMixin(obj) {
  obj.glide = function() {
    console.log("Gliding on the water");
  };
}
function flyMixin(obj) {
  obj.fly = function() {
    console.log("Flying, wooosh!");
  };
}

We can group these mixins into a module as follows:

let motionModule = (function () {
  return {
    glideMixin: function(obj) {
      obj.glide = function() {
        console.log("Gliding on the water");
      };
    },
    flyMixin: function(obj) {
      obj.fly = function() {
        console.log("Flying, wooosh!");
      };
    }
  }
})();
Note that you have an immediately invoked function expression (IIFE) that returns an object motionModule. This returned object contains all of the mixin behaviors as properties of the object. The advantage of the module pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:

motionModule.glideMixin(duck);
duck.glide();
